/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.migration.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.migration.model.LegacyProducer;
import de.uhh.l2g.plugins.migration.model.LegacyProducerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LegacyProducer service. Represents a row in the &quot;producer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.migration.model.LegacyProducerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegacyProducerImpl}.
 * </p>
 *
 * @author unihh
 * @see LegacyProducerImpl
 * @see de.uhh.l2g.plugins.migration.model.LegacyProducer
 * @see de.uhh.l2g.plugins.migration.model.LegacyProducerModel
 * @generated
 */
public class LegacyProducerModelImpl extends BaseModelImpl<LegacyProducer>
	implements LegacyProducerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legacy producer model instance should use the {@link de.uhh.l2g.plugins.migration.model.LegacyProducer} interface instead.
	 */
	public static final String TABLE_NAME = "producer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "idNum", Types.VARCHAR },
			{ "homeDir", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "hostId", Types.BIGINT },
			{ "facilityId", Types.BIGINT },
			{ "numberOfProductions", Types.BIGINT },
			{ "approved", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table producer (id_ LONG not null primary key,idNum VARCHAR(75) null,homeDir VARCHAR(75) null,userId LONG,hostId LONG,facilityId LONG,numberOfProductions LONG,approved INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table producer";
	public static final String ORDER_BY_JPQL = " ORDER BY legacyProducer.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY producer.id_ ASC";
	public static final String DATA_SOURCE = "anotherDataSource";
	public static final String SESSION_FACTORY = "anotherSessionFactory";
	public static final String TX_MANAGER = "anotherTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyProducer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyProducer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.migration.model.LegacyProducer"));

	public LegacyProducerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegacyProducer.class;
	}

	@Override
	public String getModelClassName() {
		return LegacyProducer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("idNum", getIdNum());
		attributes.put("homeDir", getHomeDir());
		attributes.put("userId", getUserId());
		attributes.put("hostId", getHostId());
		attributes.put("facilityId", getFacilityId());
		attributes.put("numberOfProductions", getNumberOfProductions());
		attributes.put("approved", getApproved());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String idNum = (String)attributes.get("idNum");

		if (idNum != null) {
			setIdNum(idNum);
		}

		String homeDir = (String)attributes.get("homeDir");

		if (homeDir != null) {
			setHomeDir(homeDir);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long hostId = (Long)attributes.get("hostId");

		if (hostId != null) {
			setHostId(hostId);
		}

		Long facilityId = (Long)attributes.get("facilityId");

		if (facilityId != null) {
			setFacilityId(facilityId);
		}

		Long numberOfProductions = (Long)attributes.get("numberOfProductions");

		if (numberOfProductions != null) {
			setNumberOfProductions(numberOfProductions);
		}

		Integer approved = (Integer)attributes.get("approved");

		if (approved != null) {
			setApproved(approved);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getIdNum() {
		if (_idNum == null) {
			return StringPool.BLANK;
		}
		else {
			return _idNum;
		}
	}

	@Override
	public void setIdNum(String idNum) {
		_idNum = idNum;
	}

	@Override
	public String getHomeDir() {
		if (_homeDir == null) {
			return StringPool.BLANK;
		}
		else {
			return _homeDir;
		}
	}

	@Override
	public void setHomeDir(String homeDir) {
		_homeDir = homeDir;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getHostId() {
		return _hostId;
	}

	@Override
	public void setHostId(long hostId) {
		_hostId = hostId;
	}

	@Override
	public long getFacilityId() {
		return _facilityId;
	}

	@Override
	public void setFacilityId(long facilityId) {
		_facilityId = facilityId;
	}

	@Override
	public long getNumberOfProductions() {
		return _numberOfProductions;
	}

	@Override
	public void setNumberOfProductions(long numberOfProductions) {
		_numberOfProductions = numberOfProductions;
	}

	@Override
	public int getApproved() {
		return _approved;
	}

	@Override
	public void setApproved(int approved) {
		_approved = approved;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LegacyProducer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegacyProducer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LegacyProducer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegacyProducerImpl legacyProducerImpl = new LegacyProducerImpl();

		legacyProducerImpl.setId(getId());
		legacyProducerImpl.setIdNum(getIdNum());
		legacyProducerImpl.setHomeDir(getHomeDir());
		legacyProducerImpl.setUserId(getUserId());
		legacyProducerImpl.setHostId(getHostId());
		legacyProducerImpl.setFacilityId(getFacilityId());
		legacyProducerImpl.setNumberOfProductions(getNumberOfProductions());
		legacyProducerImpl.setApproved(getApproved());

		legacyProducerImpl.resetOriginalValues();

		return legacyProducerImpl;
	}

	@Override
	public int compareTo(LegacyProducer legacyProducer) {
		long primaryKey = legacyProducer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegacyProducer)) {
			return false;
		}

		LegacyProducer legacyProducer = (LegacyProducer)obj;

		long primaryKey = legacyProducer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LegacyProducer> toCacheModel() {
		LegacyProducerCacheModel legacyProducerCacheModel = new LegacyProducerCacheModel();

		legacyProducerCacheModel.id = getId();

		legacyProducerCacheModel.idNum = getIdNum();

		String idNum = legacyProducerCacheModel.idNum;

		if ((idNum != null) && (idNum.length() == 0)) {
			legacyProducerCacheModel.idNum = null;
		}

		legacyProducerCacheModel.homeDir = getHomeDir();

		String homeDir = legacyProducerCacheModel.homeDir;

		if ((homeDir != null) && (homeDir.length() == 0)) {
			legacyProducerCacheModel.homeDir = null;
		}

		legacyProducerCacheModel.userId = getUserId();

		legacyProducerCacheModel.hostId = getHostId();

		legacyProducerCacheModel.facilityId = getFacilityId();

		legacyProducerCacheModel.numberOfProductions = getNumberOfProductions();

		legacyProducerCacheModel.approved = getApproved();

		return legacyProducerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", idNum=");
		sb.append(getIdNum());
		sb.append(", homeDir=");
		sb.append(getHomeDir());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", hostId=");
		sb.append(getHostId());
		sb.append(", facilityId=");
		sb.append(getFacilityId());
		sb.append(", numberOfProductions=");
		sb.append(getNumberOfProductions());
		sb.append(", approved=");
		sb.append(getApproved());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.migration.model.LegacyProducer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idNum</column-name><column-value><![CDATA[");
		sb.append(getIdNum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>homeDir</column-name><column-value><![CDATA[");
		sb.append(getHomeDir());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hostId</column-name><column-value><![CDATA[");
		sb.append(getHostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facilityId</column-name><column-value><![CDATA[");
		sb.append(getFacilityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfProductions</column-name><column-value><![CDATA[");
		sb.append(getNumberOfProductions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approved</column-name><column-value><![CDATA[");
		sb.append(getApproved());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LegacyProducer.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LegacyProducer.class
		};
	private long _id;
	private String _idNum;
	private String _homeDir;
	private long _userId;
	private String _userUuid;
	private long _hostId;
	private long _facilityId;
	private long _numberOfProductions;
	private int _approved;
	private LegacyProducer _escapedModel;
}