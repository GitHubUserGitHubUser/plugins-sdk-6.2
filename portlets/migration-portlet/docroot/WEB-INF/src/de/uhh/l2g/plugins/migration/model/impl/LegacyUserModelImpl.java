/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.migration.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.migration.model.LegacyUser;
import de.uhh.l2g.plugins.migration.model.LegacyUserModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LegacyUser service. Represents a row in the &quot;User_&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.migration.model.LegacyUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegacyUserImpl}.
 * </p>
 *
 * @author unihh
 * @see LegacyUserImpl
 * @see de.uhh.l2g.plugins.migration.model.LegacyUser
 * @see de.uhh.l2g.plugins.migration.model.LegacyUserModel
 * @generated
 */
public class LegacyUserModelImpl extends BaseModelImpl<LegacyUser>
	implements LegacyUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legacy user model instance should use the {@link de.uhh.l2g.plugins.migration.model.LegacyUser} interface instead.
	 */
	public static final String TABLE_NAME = "User_";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "defaultUser", Types.BOOLEAN },
			{ "contactId", Types.BIGINT },
			{ "password_", Types.VARCHAR },
			{ "passwordEncrypted", Types.BOOLEAN },
			{ "passwordReset", Types.BOOLEAN },
			{ "passwordModifiedDate", Types.TIMESTAMP },
			{ "reminderQueryQuestion", Types.VARCHAR },
			{ "reminderQueryAnswer", Types.VARCHAR },
			{ "graceLoginCount", Types.INTEGER },
			{ "screenName", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "openId", Types.VARCHAR },
			{ "portraitId", Types.BIGINT },
			{ "languageId", Types.VARCHAR },
			{ "timeZoneId", Types.VARCHAR },
			{ "greeting", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "loginDate", Types.TIMESTAMP },
			{ "loginIP", Types.VARCHAR },
			{ "lastLoginDate", Types.TIMESTAMP },
			{ "lastLoginIP", Types.VARCHAR },
			{ "lastFailedLoginDate", Types.TIMESTAMP },
			{ "failedLoginAttempts", Types.INTEGER },
			{ "lockout", Types.BOOLEAN },
			{ "lockoutDate", Types.TIMESTAMP },
			{ "agreedToTermsOfUse", Types.BOOLEAN },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table User_ (userId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,defaultUser BOOLEAN,contactId LONG,password_ VARCHAR(75) null,passwordEncrypted BOOLEAN,passwordReset BOOLEAN,passwordModifiedDate DATE null,reminderQueryQuestion VARCHAR(75) null,reminderQueryAnswer VARCHAR(75) null,graceLoginCount INTEGER,screenName VARCHAR(75) null,emailAddress VARCHAR(75) null,openId VARCHAR(75) null,portraitId LONG,languageId VARCHAR(75) null,timeZoneId VARCHAR(75) null,greeting VARCHAR(75) null,comments VARCHAR(75) null,loginDate DATE null,loginIP VARCHAR(75) null,lastLoginDate DATE null,lastLoginIP VARCHAR(75) null,lastFailedLoginDate DATE null,failedLoginAttempts INTEGER,lockout BOOLEAN,lockoutDate DATE null,agreedToTermsOfUse BOOLEAN,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table User_";
	public static final String ORDER_BY_JPQL = " ORDER BY legacyUser.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY User_.userId ASC";
	public static final String DATA_SOURCE = "anotherDataSource";
	public static final String SESSION_FACTORY = "anotherSessionFactory";
	public static final String TX_MANAGER = "anotherTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.uhh.l2g.plugins.migration.model.LegacyUser"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long CONTACTID_COLUMN_BITMASK = 2L;
	public static long DEFAULTUSER_COLUMN_BITMASK = 4L;
	public static long EMAILADDRESS_COLUMN_BITMASK = 8L;
	public static long OPENID_COLUMN_BITMASK = 16L;
	public static long PORTRAITID_COLUMN_BITMASK = 32L;
	public static long SCREENNAME_COLUMN_BITMASK = 64L;
	public static long USERID_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.migration.model.LegacyUser"));

	public LegacyUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegacyUser.class;
	}

	@Override
	public String getModelClassName() {
		return LegacyUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("defaultUser", getDefaultUser());
		attributes.put("contactId", getContactId());
		attributes.put("password", getPassword());
		attributes.put("passwordEncrypted", getPasswordEncrypted());
		attributes.put("passwordReset", getPasswordReset());
		attributes.put("passwordModifiedDate", getPasswordModifiedDate());
		attributes.put("reminderQueryQuestion", getReminderQueryQuestion());
		attributes.put("reminderQueryAnswer", getReminderQueryAnswer());
		attributes.put("graceLoginCount", getGraceLoginCount());
		attributes.put("screenName", getScreenName());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("openId", getOpenId());
		attributes.put("portraitId", getPortraitId());
		attributes.put("languageId", getLanguageId());
		attributes.put("timeZoneId", getTimeZoneId());
		attributes.put("greeting", getGreeting());
		attributes.put("comments", getComments());
		attributes.put("loginDate", getLoginDate());
		attributes.put("loginIP", getLoginIP());
		attributes.put("lastLoginDate", getLastLoginDate());
		attributes.put("lastLoginIP", getLastLoginIP());
		attributes.put("lastFailedLoginDate", getLastFailedLoginDate());
		attributes.put("failedLoginAttempts", getFailedLoginAttempts());
		attributes.put("lockout", getLockout());
		attributes.put("lockoutDate", getLockoutDate());
		attributes.put("agreedToTermsOfUse", getAgreedToTermsOfUse());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean defaultUser = (Boolean)attributes.get("defaultUser");

		if (defaultUser != null) {
			setDefaultUser(defaultUser);
		}

		Long contactId = (Long)attributes.get("contactId");

		if (contactId != null) {
			setContactId(contactId);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		Boolean passwordEncrypted = (Boolean)attributes.get("passwordEncrypted");

		if (passwordEncrypted != null) {
			setPasswordEncrypted(passwordEncrypted);
		}

		Boolean passwordReset = (Boolean)attributes.get("passwordReset");

		if (passwordReset != null) {
			setPasswordReset(passwordReset);
		}

		Date passwordModifiedDate = (Date)attributes.get("passwordModifiedDate");

		if (passwordModifiedDate != null) {
			setPasswordModifiedDate(passwordModifiedDate);
		}

		String reminderQueryQuestion = (String)attributes.get(
				"reminderQueryQuestion");

		if (reminderQueryQuestion != null) {
			setReminderQueryQuestion(reminderQueryQuestion);
		}

		String reminderQueryAnswer = (String)attributes.get(
				"reminderQueryAnswer");

		if (reminderQueryAnswer != null) {
			setReminderQueryAnswer(reminderQueryAnswer);
		}

		Integer graceLoginCount = (Integer)attributes.get("graceLoginCount");

		if (graceLoginCount != null) {
			setGraceLoginCount(graceLoginCount);
		}

		String screenName = (String)attributes.get("screenName");

		if (screenName != null) {
			setScreenName(screenName);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String openId = (String)attributes.get("openId");

		if (openId != null) {
			setOpenId(openId);
		}

		Long portraitId = (Long)attributes.get("portraitId");

		if (portraitId != null) {
			setPortraitId(portraitId);
		}

		String languageId = (String)attributes.get("languageId");

		if (languageId != null) {
			setLanguageId(languageId);
		}

		String timeZoneId = (String)attributes.get("timeZoneId");

		if (timeZoneId != null) {
			setTimeZoneId(timeZoneId);
		}

		String greeting = (String)attributes.get("greeting");

		if (greeting != null) {
			setGreeting(greeting);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Date loginDate = (Date)attributes.get("loginDate");

		if (loginDate != null) {
			setLoginDate(loginDate);
		}

		String loginIP = (String)attributes.get("loginIP");

		if (loginIP != null) {
			setLoginIP(loginIP);
		}

		Date lastLoginDate = (Date)attributes.get("lastLoginDate");

		if (lastLoginDate != null) {
			setLastLoginDate(lastLoginDate);
		}

		String lastLoginIP = (String)attributes.get("lastLoginIP");

		if (lastLoginIP != null) {
			setLastLoginIP(lastLoginIP);
		}

		Date lastFailedLoginDate = (Date)attributes.get("lastFailedLoginDate");

		if (lastFailedLoginDate != null) {
			setLastFailedLoginDate(lastFailedLoginDate);
		}

		Integer failedLoginAttempts = (Integer)attributes.get(
				"failedLoginAttempts");

		if (failedLoginAttempts != null) {
			setFailedLoginAttempts(failedLoginAttempts);
		}

		Boolean lockout = (Boolean)attributes.get("lockout");

		if (lockout != null) {
			setLockout(lockout);
		}

		Date lockoutDate = (Date)attributes.get("lockoutDate");

		if (lockoutDate != null) {
			setLockoutDate(lockoutDate);
		}

		Boolean agreedToTermsOfUse = (Boolean)attributes.get(
				"agreedToTermsOfUse");

		if (agreedToTermsOfUse != null) {
			setAgreedToTermsOfUse(agreedToTermsOfUse);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getDefaultUser() {
		return _defaultUser;
	}

	@Override
	public boolean isDefaultUser() {
		return _defaultUser;
	}

	@Override
	public void setDefaultUser(boolean defaultUser) {
		_columnBitmask |= DEFAULTUSER_COLUMN_BITMASK;

		if (!_setOriginalDefaultUser) {
			_setOriginalDefaultUser = true;

			_originalDefaultUser = _defaultUser;
		}

		_defaultUser = defaultUser;
	}

	public boolean getOriginalDefaultUser() {
		return _originalDefaultUser;
	}

	@Override
	public long getContactId() {
		return _contactId;
	}

	@Override
	public void setContactId(long contactId) {
		_columnBitmask |= CONTACTID_COLUMN_BITMASK;

		if (!_setOriginalContactId) {
			_setOriginalContactId = true;

			_originalContactId = _contactId;
		}

		_contactId = contactId;
	}

	public long getOriginalContactId() {
		return _originalContactId;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@Override
	public boolean getPasswordEncrypted() {
		return _passwordEncrypted;
	}

	@Override
	public boolean isPasswordEncrypted() {
		return _passwordEncrypted;
	}

	@Override
	public void setPasswordEncrypted(boolean passwordEncrypted) {
		_passwordEncrypted = passwordEncrypted;
	}

	@Override
	public boolean getPasswordReset() {
		return _passwordReset;
	}

	@Override
	public boolean isPasswordReset() {
		return _passwordReset;
	}

	@Override
	public void setPasswordReset(boolean passwordReset) {
		_passwordReset = passwordReset;
	}

	@Override
	public Date getPasswordModifiedDate() {
		return _passwordModifiedDate;
	}

	@Override
	public void setPasswordModifiedDate(Date passwordModifiedDate) {
		_passwordModifiedDate = passwordModifiedDate;
	}

	@Override
	public String getReminderQueryQuestion() {
		if (_reminderQueryQuestion == null) {
			return StringPool.BLANK;
		}
		else {
			return _reminderQueryQuestion;
		}
	}

	@Override
	public void setReminderQueryQuestion(String reminderQueryQuestion) {
		_reminderQueryQuestion = reminderQueryQuestion;
	}

	@Override
	public String getReminderQueryAnswer() {
		if (_reminderQueryAnswer == null) {
			return StringPool.BLANK;
		}
		else {
			return _reminderQueryAnswer;
		}
	}

	@Override
	public void setReminderQueryAnswer(String reminderQueryAnswer) {
		_reminderQueryAnswer = reminderQueryAnswer;
	}

	@Override
	public int getGraceLoginCount() {
		return _graceLoginCount;
	}

	@Override
	public void setGraceLoginCount(int graceLoginCount) {
		_graceLoginCount = graceLoginCount;
	}

	@Override
	public String getScreenName() {
		if (_screenName == null) {
			return StringPool.BLANK;
		}
		else {
			return _screenName;
		}
	}

	@Override
	public void setScreenName(String screenName) {
		_columnBitmask |= SCREENNAME_COLUMN_BITMASK;

		if (_originalScreenName == null) {
			_originalScreenName = _screenName;
		}

		_screenName = screenName;
	}

	public String getOriginalScreenName() {
		return GetterUtil.getString(_originalScreenName);
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@Override
	public String getOpenId() {
		if (_openId == null) {
			return StringPool.BLANK;
		}
		else {
			return _openId;
		}
	}

	@Override
	public void setOpenId(String openId) {
		_columnBitmask |= OPENID_COLUMN_BITMASK;

		if (_originalOpenId == null) {
			_originalOpenId = _openId;
		}

		_openId = openId;
	}

	public String getOriginalOpenId() {
		return GetterUtil.getString(_originalOpenId);
	}

	@Override
	public long getPortraitId() {
		return _portraitId;
	}

	@Override
	public void setPortraitId(long portraitId) {
		_columnBitmask |= PORTRAITID_COLUMN_BITMASK;

		if (!_setOriginalPortraitId) {
			_setOriginalPortraitId = true;

			_originalPortraitId = _portraitId;
		}

		_portraitId = portraitId;
	}

	public long getOriginalPortraitId() {
		return _originalPortraitId;
	}

	@Override
	public String getLanguageId() {
		if (_languageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _languageId;
		}
	}

	@Override
	public void setLanguageId(String languageId) {
		_languageId = languageId;
	}

	@Override
	public String getTimeZoneId() {
		if (_timeZoneId == null) {
			return StringPool.BLANK;
		}
		else {
			return _timeZoneId;
		}
	}

	@Override
	public void setTimeZoneId(String timeZoneId) {
		_timeZoneId = timeZoneId;
	}

	@Override
	public String getGreeting() {
		if (_greeting == null) {
			return StringPool.BLANK;
		}
		else {
			return _greeting;
		}
	}

	@Override
	public void setGreeting(String greeting) {
		_greeting = greeting;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public Date getLoginDate() {
		return _loginDate;
	}

	@Override
	public void setLoginDate(Date loginDate) {
		_loginDate = loginDate;
	}

	@Override
	public String getLoginIP() {
		if (_loginIP == null) {
			return StringPool.BLANK;
		}
		else {
			return _loginIP;
		}
	}

	@Override
	public void setLoginIP(String loginIP) {
		_loginIP = loginIP;
	}

	@Override
	public Date getLastLoginDate() {
		return _lastLoginDate;
	}

	@Override
	public void setLastLoginDate(Date lastLoginDate) {
		_lastLoginDate = lastLoginDate;
	}

	@Override
	public String getLastLoginIP() {
		if (_lastLoginIP == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastLoginIP;
		}
	}

	@Override
	public void setLastLoginIP(String lastLoginIP) {
		_lastLoginIP = lastLoginIP;
	}

	@Override
	public Date getLastFailedLoginDate() {
		return _lastFailedLoginDate;
	}

	@Override
	public void setLastFailedLoginDate(Date lastFailedLoginDate) {
		_lastFailedLoginDate = lastFailedLoginDate;
	}

	@Override
	public int getFailedLoginAttempts() {
		return _failedLoginAttempts;
	}

	@Override
	public void setFailedLoginAttempts(int failedLoginAttempts) {
		_failedLoginAttempts = failedLoginAttempts;
	}

	@Override
	public boolean getLockout() {
		return _lockout;
	}

	@Override
	public boolean isLockout() {
		return _lockout;
	}

	@Override
	public void setLockout(boolean lockout) {
		_lockout = lockout;
	}

	@Override
	public Date getLockoutDate() {
		return _lockoutDate;
	}

	@Override
	public void setLockoutDate(Date lockoutDate) {
		_lockoutDate = lockoutDate;
	}

	@Override
	public boolean getAgreedToTermsOfUse() {
		return _agreedToTermsOfUse;
	}

	@Override
	public boolean isAgreedToTermsOfUse() {
		return _agreedToTermsOfUse;
	}

	@Override
	public void setAgreedToTermsOfUse(boolean agreedToTermsOfUse) {
		_agreedToTermsOfUse = agreedToTermsOfUse;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LegacyUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegacyUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LegacyUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegacyUserImpl legacyUserImpl = new LegacyUserImpl();

		legacyUserImpl.setUserId(getUserId());
		legacyUserImpl.setCompanyId(getCompanyId());
		legacyUserImpl.setCreateDate(getCreateDate());
		legacyUserImpl.setModifiedDate(getModifiedDate());
		legacyUserImpl.setDefaultUser(getDefaultUser());
		legacyUserImpl.setContactId(getContactId());
		legacyUserImpl.setPassword(getPassword());
		legacyUserImpl.setPasswordEncrypted(getPasswordEncrypted());
		legacyUserImpl.setPasswordReset(getPasswordReset());
		legacyUserImpl.setPasswordModifiedDate(getPasswordModifiedDate());
		legacyUserImpl.setReminderQueryQuestion(getReminderQueryQuestion());
		legacyUserImpl.setReminderQueryAnswer(getReminderQueryAnswer());
		legacyUserImpl.setGraceLoginCount(getGraceLoginCount());
		legacyUserImpl.setScreenName(getScreenName());
		legacyUserImpl.setEmailAddress(getEmailAddress());
		legacyUserImpl.setOpenId(getOpenId());
		legacyUserImpl.setPortraitId(getPortraitId());
		legacyUserImpl.setLanguageId(getLanguageId());
		legacyUserImpl.setTimeZoneId(getTimeZoneId());
		legacyUserImpl.setGreeting(getGreeting());
		legacyUserImpl.setComments(getComments());
		legacyUserImpl.setLoginDate(getLoginDate());
		legacyUserImpl.setLoginIP(getLoginIP());
		legacyUserImpl.setLastLoginDate(getLastLoginDate());
		legacyUserImpl.setLastLoginIP(getLastLoginIP());
		legacyUserImpl.setLastFailedLoginDate(getLastFailedLoginDate());
		legacyUserImpl.setFailedLoginAttempts(getFailedLoginAttempts());
		legacyUserImpl.setLockout(getLockout());
		legacyUserImpl.setLockoutDate(getLockoutDate());
		legacyUserImpl.setAgreedToTermsOfUse(getAgreedToTermsOfUse());
		legacyUserImpl.setActive(getActive());

		legacyUserImpl.resetOriginalValues();

		return legacyUserImpl;
	}

	@Override
	public int compareTo(LegacyUser legacyUser) {
		long primaryKey = legacyUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegacyUser)) {
			return false;
		}

		LegacyUser legacyUser = (LegacyUser)obj;

		long primaryKey = legacyUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LegacyUserModelImpl legacyUserModelImpl = this;

		legacyUserModelImpl._originalUserId = legacyUserModelImpl._userId;

		legacyUserModelImpl._setOriginalUserId = false;

		legacyUserModelImpl._originalCompanyId = legacyUserModelImpl._companyId;

		legacyUserModelImpl._setOriginalCompanyId = false;

		legacyUserModelImpl._originalDefaultUser = legacyUserModelImpl._defaultUser;

		legacyUserModelImpl._setOriginalDefaultUser = false;

		legacyUserModelImpl._originalContactId = legacyUserModelImpl._contactId;

		legacyUserModelImpl._setOriginalContactId = false;

		legacyUserModelImpl._originalScreenName = legacyUserModelImpl._screenName;

		legacyUserModelImpl._originalEmailAddress = legacyUserModelImpl._emailAddress;

		legacyUserModelImpl._originalOpenId = legacyUserModelImpl._openId;

		legacyUserModelImpl._originalPortraitId = legacyUserModelImpl._portraitId;

		legacyUserModelImpl._setOriginalPortraitId = false;

		legacyUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LegacyUser> toCacheModel() {
		LegacyUserCacheModel legacyUserCacheModel = new LegacyUserCacheModel();

		legacyUserCacheModel.userId = getUserId();

		legacyUserCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			legacyUserCacheModel.createDate = createDate.getTime();
		}
		else {
			legacyUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			legacyUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			legacyUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		legacyUserCacheModel.defaultUser = getDefaultUser();

		legacyUserCacheModel.contactId = getContactId();

		legacyUserCacheModel.password = getPassword();

		String password = legacyUserCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			legacyUserCacheModel.password = null;
		}

		legacyUserCacheModel.passwordEncrypted = getPasswordEncrypted();

		legacyUserCacheModel.passwordReset = getPasswordReset();

		Date passwordModifiedDate = getPasswordModifiedDate();

		if (passwordModifiedDate != null) {
			legacyUserCacheModel.passwordModifiedDate = passwordModifiedDate.getTime();
		}
		else {
			legacyUserCacheModel.passwordModifiedDate = Long.MIN_VALUE;
		}

		legacyUserCacheModel.reminderQueryQuestion = getReminderQueryQuestion();

		String reminderQueryQuestion = legacyUserCacheModel.reminderQueryQuestion;

		if ((reminderQueryQuestion != null) &&
				(reminderQueryQuestion.length() == 0)) {
			legacyUserCacheModel.reminderQueryQuestion = null;
		}

		legacyUserCacheModel.reminderQueryAnswer = getReminderQueryAnswer();

		String reminderQueryAnswer = legacyUserCacheModel.reminderQueryAnswer;

		if ((reminderQueryAnswer != null) &&
				(reminderQueryAnswer.length() == 0)) {
			legacyUserCacheModel.reminderQueryAnswer = null;
		}

		legacyUserCacheModel.graceLoginCount = getGraceLoginCount();

		legacyUserCacheModel.screenName = getScreenName();

		String screenName = legacyUserCacheModel.screenName;

		if ((screenName != null) && (screenName.length() == 0)) {
			legacyUserCacheModel.screenName = null;
		}

		legacyUserCacheModel.emailAddress = getEmailAddress();

		String emailAddress = legacyUserCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			legacyUserCacheModel.emailAddress = null;
		}

		legacyUserCacheModel.openId = getOpenId();

		String openId = legacyUserCacheModel.openId;

		if ((openId != null) && (openId.length() == 0)) {
			legacyUserCacheModel.openId = null;
		}

		legacyUserCacheModel.portraitId = getPortraitId();

		legacyUserCacheModel.languageId = getLanguageId();

		String languageId = legacyUserCacheModel.languageId;

		if ((languageId != null) && (languageId.length() == 0)) {
			legacyUserCacheModel.languageId = null;
		}

		legacyUserCacheModel.timeZoneId = getTimeZoneId();

		String timeZoneId = legacyUserCacheModel.timeZoneId;

		if ((timeZoneId != null) && (timeZoneId.length() == 0)) {
			legacyUserCacheModel.timeZoneId = null;
		}

		legacyUserCacheModel.greeting = getGreeting();

		String greeting = legacyUserCacheModel.greeting;

		if ((greeting != null) && (greeting.length() == 0)) {
			legacyUserCacheModel.greeting = null;
		}

		legacyUserCacheModel.comments = getComments();

		String comments = legacyUserCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			legacyUserCacheModel.comments = null;
		}

		Date loginDate = getLoginDate();

		if (loginDate != null) {
			legacyUserCacheModel.loginDate = loginDate.getTime();
		}
		else {
			legacyUserCacheModel.loginDate = Long.MIN_VALUE;
		}

		legacyUserCacheModel.loginIP = getLoginIP();

		String loginIP = legacyUserCacheModel.loginIP;

		if ((loginIP != null) && (loginIP.length() == 0)) {
			legacyUserCacheModel.loginIP = null;
		}

		Date lastLoginDate = getLastLoginDate();

		if (lastLoginDate != null) {
			legacyUserCacheModel.lastLoginDate = lastLoginDate.getTime();
		}
		else {
			legacyUserCacheModel.lastLoginDate = Long.MIN_VALUE;
		}

		legacyUserCacheModel.lastLoginIP = getLastLoginIP();

		String lastLoginIP = legacyUserCacheModel.lastLoginIP;

		if ((lastLoginIP != null) && (lastLoginIP.length() == 0)) {
			legacyUserCacheModel.lastLoginIP = null;
		}

		Date lastFailedLoginDate = getLastFailedLoginDate();

		if (lastFailedLoginDate != null) {
			legacyUserCacheModel.lastFailedLoginDate = lastFailedLoginDate.getTime();
		}
		else {
			legacyUserCacheModel.lastFailedLoginDate = Long.MIN_VALUE;
		}

		legacyUserCacheModel.failedLoginAttempts = getFailedLoginAttempts();

		legacyUserCacheModel.lockout = getLockout();

		Date lockoutDate = getLockoutDate();

		if (lockoutDate != null) {
			legacyUserCacheModel.lockoutDate = lockoutDate.getTime();
		}
		else {
			legacyUserCacheModel.lockoutDate = Long.MIN_VALUE;
		}

		legacyUserCacheModel.agreedToTermsOfUse = getAgreedToTermsOfUse();

		legacyUserCacheModel.active = getActive();

		return legacyUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(63);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", defaultUser=");
		sb.append(getDefaultUser());
		sb.append(", contactId=");
		sb.append(getContactId());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", passwordEncrypted=");
		sb.append(getPasswordEncrypted());
		sb.append(", passwordReset=");
		sb.append(getPasswordReset());
		sb.append(", passwordModifiedDate=");
		sb.append(getPasswordModifiedDate());
		sb.append(", reminderQueryQuestion=");
		sb.append(getReminderQueryQuestion());
		sb.append(", reminderQueryAnswer=");
		sb.append(getReminderQueryAnswer());
		sb.append(", graceLoginCount=");
		sb.append(getGraceLoginCount());
		sb.append(", screenName=");
		sb.append(getScreenName());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", openId=");
		sb.append(getOpenId());
		sb.append(", portraitId=");
		sb.append(getPortraitId());
		sb.append(", languageId=");
		sb.append(getLanguageId());
		sb.append(", timeZoneId=");
		sb.append(getTimeZoneId());
		sb.append(", greeting=");
		sb.append(getGreeting());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", loginDate=");
		sb.append(getLoginDate());
		sb.append(", loginIP=");
		sb.append(getLoginIP());
		sb.append(", lastLoginDate=");
		sb.append(getLastLoginDate());
		sb.append(", lastLoginIP=");
		sb.append(getLastLoginIP());
		sb.append(", lastFailedLoginDate=");
		sb.append(getLastFailedLoginDate());
		sb.append(", failedLoginAttempts=");
		sb.append(getFailedLoginAttempts());
		sb.append(", lockout=");
		sb.append(getLockout());
		sb.append(", lockoutDate=");
		sb.append(getLockoutDate());
		sb.append(", agreedToTermsOfUse=");
		sb.append(getAgreedToTermsOfUse());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(97);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.migration.model.LegacyUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultUser</column-name><column-value><![CDATA[");
		sb.append(getDefaultUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contactId</column-name><column-value><![CDATA[");
		sb.append(getContactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passwordEncrypted</column-name><column-value><![CDATA[");
		sb.append(getPasswordEncrypted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passwordReset</column-name><column-value><![CDATA[");
		sb.append(getPasswordReset());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passwordModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getPasswordModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reminderQueryQuestion</column-name><column-value><![CDATA[");
		sb.append(getReminderQueryQuestion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reminderQueryAnswer</column-name><column-value><![CDATA[");
		sb.append(getReminderQueryAnswer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graceLoginCount</column-name><column-value><![CDATA[");
		sb.append(getGraceLoginCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>screenName</column-name><column-value><![CDATA[");
		sb.append(getScreenName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openId</column-name><column-value><![CDATA[");
		sb.append(getOpenId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portraitId</column-name><column-value><![CDATA[");
		sb.append(getPortraitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageId</column-name><column-value><![CDATA[");
		sb.append(getLanguageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeZoneId</column-name><column-value><![CDATA[");
		sb.append(getTimeZoneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>greeting</column-name><column-value><![CDATA[");
		sb.append(getGreeting());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loginDate</column-name><column-value><![CDATA[");
		sb.append(getLoginDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loginIP</column-name><column-value><![CDATA[");
		sb.append(getLoginIP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastLoginDate</column-name><column-value><![CDATA[");
		sb.append(getLastLoginDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastLoginIP</column-name><column-value><![CDATA[");
		sb.append(getLastLoginIP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastFailedLoginDate</column-name><column-value><![CDATA[");
		sb.append(getLastFailedLoginDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>failedLoginAttempts</column-name><column-value><![CDATA[");
		sb.append(getFailedLoginAttempts());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lockout</column-name><column-value><![CDATA[");
		sb.append(getLockout());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lockoutDate</column-name><column-value><![CDATA[");
		sb.append(getLockoutDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>agreedToTermsOfUse</column-name><column-value><![CDATA[");
		sb.append(getAgreedToTermsOfUse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LegacyUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LegacyUser.class
		};
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _defaultUser;
	private boolean _originalDefaultUser;
	private boolean _setOriginalDefaultUser;
	private long _contactId;
	private long _originalContactId;
	private boolean _setOriginalContactId;
	private String _password;
	private boolean _passwordEncrypted;
	private boolean _passwordReset;
	private Date _passwordModifiedDate;
	private String _reminderQueryQuestion;
	private String _reminderQueryAnswer;
	private int _graceLoginCount;
	private String _screenName;
	private String _originalScreenName;
	private String _emailAddress;
	private String _originalEmailAddress;
	private String _openId;
	private String _originalOpenId;
	private long _portraitId;
	private long _originalPortraitId;
	private boolean _setOriginalPortraitId;
	private String _languageId;
	private String _timeZoneId;
	private String _greeting;
	private String _comments;
	private Date _loginDate;
	private String _loginIP;
	private Date _lastLoginDate;
	private String _lastLoginIP;
	private Date _lastFailedLoginDate;
	private int _failedLoginAttempts;
	private boolean _lockout;
	private Date _lockoutDate;
	private boolean _agreedToTermsOfUse;
	private boolean _active;
	private long _columnBitmask;
	private LegacyUser _escapedModel;
}