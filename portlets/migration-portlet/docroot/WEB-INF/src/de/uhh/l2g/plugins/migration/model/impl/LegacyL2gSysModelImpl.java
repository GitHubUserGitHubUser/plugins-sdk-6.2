/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.migration.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import de.uhh.l2g.plugins.migration.model.LegacyL2gSys;
import de.uhh.l2g.plugins.migration.model.LegacyL2gSysModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LegacyL2gSys service. Represents a row in the &quot;l2gsys&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.migration.model.LegacyL2gSysModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegacyL2gSysImpl}.
 * </p>
 *
 * @author unihh
 * @see LegacyL2gSysImpl
 * @see de.uhh.l2g.plugins.migration.model.LegacyL2gSys
 * @see de.uhh.l2g.plugins.migration.model.LegacyL2gSysModel
 * @generated
 */
public class LegacyL2gSysModelImpl extends BaseModelImpl<LegacyL2gSys>
	implements LegacyL2gSysModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legacy l2g sys model instance should use the {@link de.uhh.l2g.plugins.migration.model.LegacyL2gSys} interface instead.
	 */
	public static final String TABLE_NAME = "l2gsys";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.INTEGER },
			{ "version", Types.VARCHAR },
			{ "setupwizard", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table l2gsys (id_ INTEGER not null primary key,version VARCHAR(75) null,setupwizard INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table l2gsys";
	public static final String ORDER_BY_JPQL = " ORDER BY legacyL2gSys.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY l2gsys.id_ ASC";
	public static final String DATA_SOURCE = "anotherDataSource";
	public static final String SESSION_FACTORY = "anotherSessionFactory";
	public static final String TX_MANAGER = "anotherTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyL2gSys"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyL2gSys"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.migration.model.LegacyL2gSys"));

	public LegacyL2gSysModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegacyL2gSys.class;
	}

	@Override
	public String getModelClassName() {
		return LegacyL2gSys.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("version", getVersion());
		attributes.put("setupwizard", getSetupwizard());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		Integer setupwizard = (Integer)attributes.get("setupwizard");

		if (setupwizard != null) {
			setSetupwizard(setupwizard);
		}
	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_id = id;
	}

	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@Override
	public int getSetupwizard() {
		return _setupwizard;
	}

	@Override
	public void setSetupwizard(int setupwizard) {
		_setupwizard = setupwizard;
	}

	@Override
	public LegacyL2gSys toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LegacyL2gSys)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegacyL2gSysImpl legacyL2gSysImpl = new LegacyL2gSysImpl();

		legacyL2gSysImpl.setId(getId());
		legacyL2gSysImpl.setVersion(getVersion());
		legacyL2gSysImpl.setSetupwizard(getSetupwizard());

		legacyL2gSysImpl.resetOriginalValues();

		return legacyL2gSysImpl;
	}

	@Override
	public int compareTo(LegacyL2gSys legacyL2gSys) {
		int primaryKey = legacyL2gSys.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegacyL2gSys)) {
			return false;
		}

		LegacyL2gSys legacyL2gSys = (LegacyL2gSys)obj;

		int primaryKey = legacyL2gSys.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LegacyL2gSys> toCacheModel() {
		LegacyL2gSysCacheModel legacyL2gSysCacheModel = new LegacyL2gSysCacheModel();

		legacyL2gSysCacheModel.id = getId();

		legacyL2gSysCacheModel.version = getVersion();

		String version = legacyL2gSysCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			legacyL2gSysCacheModel.version = null;
		}

		legacyL2gSysCacheModel.setupwizard = getSetupwizard();

		return legacyL2gSysCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", setupwizard=");
		sb.append(getSetupwizard());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.migration.model.LegacyL2gSys");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>setupwizard</column-name><column-value><![CDATA[");
		sb.append(getSetupwizard());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LegacyL2gSys.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LegacyL2gSys.class
		};
	private int _id;
	private String _version;
	private int _setupwizard;
	private LegacyL2gSys _escapedModel;
}