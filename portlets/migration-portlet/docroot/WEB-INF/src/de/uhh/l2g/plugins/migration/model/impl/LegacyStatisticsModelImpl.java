/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.migration.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import de.uhh.l2g.plugins.migration.model.LegacyStatistics;
import de.uhh.l2g.plugins.migration.model.LegacyStatisticsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LegacyStatistics service. Represents a row in the &quot;videostats&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.migration.model.LegacyStatisticsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegacyStatisticsImpl}.
 * </p>
 *
 * @author unihh
 * @see LegacyStatisticsImpl
 * @see de.uhh.l2g.plugins.migration.model.LegacyStatistics
 * @see de.uhh.l2g.plugins.migration.model.LegacyStatisticsModel
 * @generated
 */
public class LegacyStatisticsModelImpl extends BaseModelImpl<LegacyStatistics>
	implements LegacyStatisticsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legacy statistics model instance should use the {@link de.uhh.l2g.plugins.migration.model.LegacyStatistics} interface instead.
	 */
	public static final String TABLE_NAME = "videostats";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.INTEGER },
			{ "public_", Types.INTEGER },
			{ "private_", Types.INTEGER },
			{ "autofill", Types.INTEGER },
			{ "date_", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table videostats (id_ INTEGER not null primary key,public_ INTEGER,private_ INTEGER,autofill INTEGER,date_ DATE null)";
	public static final String TABLE_SQL_DROP = "drop table videostats";
	public static final String ORDER_BY_JPQL = " ORDER BY legacyStatistics.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY videostats.id_ ASC";
	public static final String DATA_SOURCE = "anotherDataSource";
	public static final String SESSION_FACTORY = "anotherSessionFactory";
	public static final String TX_MANAGER = "anotherTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyStatistics"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyStatistics"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.migration.model.LegacyStatistics"));

	public LegacyStatisticsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegacyStatistics.class;
	}

	@Override
	public String getModelClassName() {
		return LegacyStatistics.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("public_", getPublic_());
		attributes.put("private_", getPrivate_());
		attributes.put("autofill", getAutofill());
		attributes.put("date_", getDate_());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Integer public_ = (Integer)attributes.get("public_");

		if (public_ != null) {
			setPublic_(public_);
		}

		Integer private_ = (Integer)attributes.get("private_");

		if (private_ != null) {
			setPrivate_(private_);
		}

		Integer autofill = (Integer)attributes.get("autofill");

		if (autofill != null) {
			setAutofill(autofill);
		}

		Date date_ = (Date)attributes.get("date_");

		if (date_ != null) {
			setDate_(date_);
		}
	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_id = id;
	}

	@Override
	public int getPublic_() {
		return _public_;
	}

	@Override
	public void setPublic_(int public_) {
		_public_ = public_;
	}

	@Override
	public int getPrivate_() {
		return _private_;
	}

	@Override
	public void setPrivate_(int private_) {
		_private_ = private_;
	}

	@Override
	public int getAutofill() {
		return _autofill;
	}

	@Override
	public void setAutofill(int autofill) {
		_autofill = autofill;
	}

	@Override
	public Date getDate_() {
		return _date_;
	}

	@Override
	public void setDate_(Date date_) {
		_date_ = date_;
	}

	@Override
	public LegacyStatistics toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LegacyStatistics)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegacyStatisticsImpl legacyStatisticsImpl = new LegacyStatisticsImpl();

		legacyStatisticsImpl.setId(getId());
		legacyStatisticsImpl.setPublic_(getPublic_());
		legacyStatisticsImpl.setPrivate_(getPrivate_());
		legacyStatisticsImpl.setAutofill(getAutofill());
		legacyStatisticsImpl.setDate_(getDate_());

		legacyStatisticsImpl.resetOriginalValues();

		return legacyStatisticsImpl;
	}

	@Override
	public int compareTo(LegacyStatistics legacyStatistics) {
		int primaryKey = legacyStatistics.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegacyStatistics)) {
			return false;
		}

		LegacyStatistics legacyStatistics = (LegacyStatistics)obj;

		int primaryKey = legacyStatistics.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LegacyStatistics> toCacheModel() {
		LegacyStatisticsCacheModel legacyStatisticsCacheModel = new LegacyStatisticsCacheModel();

		legacyStatisticsCacheModel.id = getId();

		legacyStatisticsCacheModel.public_ = getPublic_();

		legacyStatisticsCacheModel.private_ = getPrivate_();

		legacyStatisticsCacheModel.autofill = getAutofill();

		Date date_ = getDate_();

		if (date_ != null) {
			legacyStatisticsCacheModel.date_ = date_.getTime();
		}
		else {
			legacyStatisticsCacheModel.date_ = Long.MIN_VALUE;
		}

		return legacyStatisticsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", public_=");
		sb.append(getPublic_());
		sb.append(", private_=");
		sb.append(getPrivate_());
		sb.append(", autofill=");
		sb.append(getAutofill());
		sb.append(", date_=");
		sb.append(getDate_());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.migration.model.LegacyStatistics");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>public_</column-name><column-value><![CDATA[");
		sb.append(getPublic_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>private_</column-name><column-value><![CDATA[");
		sb.append(getPrivate_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autofill</column-name><column-value><![CDATA[");
		sb.append(getAutofill());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_</column-name><column-value><![CDATA[");
		sb.append(getDate_());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LegacyStatistics.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LegacyStatistics.class
		};
	private int _id;
	private int _public_;
	private int _private_;
	private int _autofill;
	private Date _date_;
	private LegacyStatistics _escapedModel;
}