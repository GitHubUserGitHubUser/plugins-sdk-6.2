/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.migration.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.migration.model.LegacyMetadata;
import de.uhh.l2g.plugins.migration.model.LegacyMetadataModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LegacyMetadata service. Represents a row in the &quot;metadata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.migration.model.LegacyMetadataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegacyMetadataImpl}.
 * </p>
 *
 * @author unihh
 * @see LegacyMetadataImpl
 * @see de.uhh.l2g.plugins.migration.model.LegacyMetadata
 * @see de.uhh.l2g.plugins.migration.model.LegacyMetadataModel
 * @generated
 */
public class LegacyMetadataModelImpl extends BaseModelImpl<LegacyMetadata>
	implements LegacyMetadataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legacy metadata model instance should use the {@link de.uhh.l2g.plugins.migration.model.LegacyMetadata} interface instead.
	 */
	public static final String TABLE_NAME = "metadata";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "URLID", Types.VARCHAR },
			{ "format", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "subject", Types.VARCHAR },
			{ "coverage", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "creator", Types.VARCHAR },
			{ "publisher", Types.VARCHAR },
			{ "contributor", Types.VARCHAR },
			{ "rightsHolder", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table metadata (id_ LONG not null primary key,URLID VARCHAR(75) null,format VARCHAR(75) null,type_ VARCHAR(75) null,language VARCHAR(75) null,title VARCHAR(75) null,subject VARCHAR(75) null,coverage VARCHAR(75) null,description VARCHAR(75) null,creator VARCHAR(75) null,publisher VARCHAR(75) null,contributor VARCHAR(75) null,rightsHolder VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table metadata";
	public static final String ORDER_BY_JPQL = " ORDER BY legacyMetadata.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY metadata.id_ ASC";
	public static final String DATA_SOURCE = "anotherDataSource";
	public static final String SESSION_FACTORY = "anotherSessionFactory";
	public static final String TX_MANAGER = "anotherTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyMetadata"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyMetadata"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.migration.model.LegacyMetadata"));

	public LegacyMetadataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegacyMetadata.class;
	}

	@Override
	public String getModelClassName() {
		return LegacyMetadata.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("URLID", getURLID());
		attributes.put("format", getFormat());
		attributes.put("type", getType());
		attributes.put("language", getLanguage());
		attributes.put("title", getTitle());
		attributes.put("subject", getSubject());
		attributes.put("coverage", getCoverage());
		attributes.put("description", getDescription());
		attributes.put("creator", getCreator());
		attributes.put("publisher", getPublisher());
		attributes.put("contributor", getContributor());
		attributes.put("rightsHolder", getRightsHolder());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String URLID = (String)attributes.get("URLID");

		if (URLID != null) {
			setURLID(URLID);
		}

		String format = (String)attributes.get("format");

		if (format != null) {
			setFormat(format);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String coverage = (String)attributes.get("coverage");

		if (coverage != null) {
			setCoverage(coverage);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String creator = (String)attributes.get("creator");

		if (creator != null) {
			setCreator(creator);
		}

		String publisher = (String)attributes.get("publisher");

		if (publisher != null) {
			setPublisher(publisher);
		}

		String contributor = (String)attributes.get("contributor");

		if (contributor != null) {
			setContributor(contributor);
		}

		String rightsHolder = (String)attributes.get("rightsHolder");

		if (rightsHolder != null) {
			setRightsHolder(rightsHolder);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getURLID() {
		if (_URLID == null) {
			return StringPool.BLANK;
		}
		else {
			return _URLID;
		}
	}

	@Override
	public void setURLID(String URLID) {
		_URLID = URLID;
	}

	@Override
	public String getFormat() {
		if (_format == null) {
			return StringPool.BLANK;
		}
		else {
			return _format;
		}
	}

	@Override
	public void setFormat(String format) {
		_format = format;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public String getCoverage() {
		if (_coverage == null) {
			return StringPool.BLANK;
		}
		else {
			return _coverage;
		}
	}

	@Override
	public void setCoverage(String coverage) {
		_coverage = coverage;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getCreator() {
		if (_creator == null) {
			return StringPool.BLANK;
		}
		else {
			return _creator;
		}
	}

	@Override
	public void setCreator(String creator) {
		_creator = creator;
	}

	@Override
	public String getPublisher() {
		if (_publisher == null) {
			return StringPool.BLANK;
		}
		else {
			return _publisher;
		}
	}

	@Override
	public void setPublisher(String publisher) {
		_publisher = publisher;
	}

	@Override
	public String getContributor() {
		if (_contributor == null) {
			return StringPool.BLANK;
		}
		else {
			return _contributor;
		}
	}

	@Override
	public void setContributor(String contributor) {
		_contributor = contributor;
	}

	@Override
	public String getRightsHolder() {
		if (_rightsHolder == null) {
			return StringPool.BLANK;
		}
		else {
			return _rightsHolder;
		}
	}

	@Override
	public void setRightsHolder(String rightsHolder) {
		_rightsHolder = rightsHolder;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LegacyMetadata.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegacyMetadata toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LegacyMetadata)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegacyMetadataImpl legacyMetadataImpl = new LegacyMetadataImpl();

		legacyMetadataImpl.setId(getId());
		legacyMetadataImpl.setURLID(getURLID());
		legacyMetadataImpl.setFormat(getFormat());
		legacyMetadataImpl.setType(getType());
		legacyMetadataImpl.setLanguage(getLanguage());
		legacyMetadataImpl.setTitle(getTitle());
		legacyMetadataImpl.setSubject(getSubject());
		legacyMetadataImpl.setCoverage(getCoverage());
		legacyMetadataImpl.setDescription(getDescription());
		legacyMetadataImpl.setCreator(getCreator());
		legacyMetadataImpl.setPublisher(getPublisher());
		legacyMetadataImpl.setContributor(getContributor());
		legacyMetadataImpl.setRightsHolder(getRightsHolder());

		legacyMetadataImpl.resetOriginalValues();

		return legacyMetadataImpl;
	}

	@Override
	public int compareTo(LegacyMetadata legacyMetadata) {
		long primaryKey = legacyMetadata.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegacyMetadata)) {
			return false;
		}

		LegacyMetadata legacyMetadata = (LegacyMetadata)obj;

		long primaryKey = legacyMetadata.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LegacyMetadata> toCacheModel() {
		LegacyMetadataCacheModel legacyMetadataCacheModel = new LegacyMetadataCacheModel();

		legacyMetadataCacheModel.id = getId();

		legacyMetadataCacheModel.URLID = getURLID();

		String URLID = legacyMetadataCacheModel.URLID;

		if ((URLID != null) && (URLID.length() == 0)) {
			legacyMetadataCacheModel.URLID = null;
		}

		legacyMetadataCacheModel.format = getFormat();

		String format = legacyMetadataCacheModel.format;

		if ((format != null) && (format.length() == 0)) {
			legacyMetadataCacheModel.format = null;
		}

		legacyMetadataCacheModel.type = getType();

		String type = legacyMetadataCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			legacyMetadataCacheModel.type = null;
		}

		legacyMetadataCacheModel.language = getLanguage();

		String language = legacyMetadataCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			legacyMetadataCacheModel.language = null;
		}

		legacyMetadataCacheModel.title = getTitle();

		String title = legacyMetadataCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			legacyMetadataCacheModel.title = null;
		}

		legacyMetadataCacheModel.subject = getSubject();

		String subject = legacyMetadataCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			legacyMetadataCacheModel.subject = null;
		}

		legacyMetadataCacheModel.coverage = getCoverage();

		String coverage = legacyMetadataCacheModel.coverage;

		if ((coverage != null) && (coverage.length() == 0)) {
			legacyMetadataCacheModel.coverage = null;
		}

		legacyMetadataCacheModel.description = getDescription();

		String description = legacyMetadataCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			legacyMetadataCacheModel.description = null;
		}

		legacyMetadataCacheModel.creator = getCreator();

		String creator = legacyMetadataCacheModel.creator;

		if ((creator != null) && (creator.length() == 0)) {
			legacyMetadataCacheModel.creator = null;
		}

		legacyMetadataCacheModel.publisher = getPublisher();

		String publisher = legacyMetadataCacheModel.publisher;

		if ((publisher != null) && (publisher.length() == 0)) {
			legacyMetadataCacheModel.publisher = null;
		}

		legacyMetadataCacheModel.contributor = getContributor();

		String contributor = legacyMetadataCacheModel.contributor;

		if ((contributor != null) && (contributor.length() == 0)) {
			legacyMetadataCacheModel.contributor = null;
		}

		legacyMetadataCacheModel.rightsHolder = getRightsHolder();

		String rightsHolder = legacyMetadataCacheModel.rightsHolder;

		if ((rightsHolder != null) && (rightsHolder.length() == 0)) {
			legacyMetadataCacheModel.rightsHolder = null;
		}

		return legacyMetadataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", URLID=");
		sb.append(getURLID());
		sb.append(", format=");
		sb.append(getFormat());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", coverage=");
		sb.append(getCoverage());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", creator=");
		sb.append(getCreator());
		sb.append(", publisher=");
		sb.append(getPublisher());
		sb.append(", contributor=");
		sb.append(getContributor());
		sb.append(", rightsHolder=");
		sb.append(getRightsHolder());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.migration.model.LegacyMetadata");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>URLID</column-name><column-value><![CDATA[");
		sb.append(getURLID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>format</column-name><column-value><![CDATA[");
		sb.append(getFormat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverage</column-name><column-value><![CDATA[");
		sb.append(getCoverage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creator</column-name><column-value><![CDATA[");
		sb.append(getCreator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publisher</column-name><column-value><![CDATA[");
		sb.append(getPublisher());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contributor</column-name><column-value><![CDATA[");
		sb.append(getContributor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rightsHolder</column-name><column-value><![CDATA[");
		sb.append(getRightsHolder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LegacyMetadata.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LegacyMetadata.class
		};
	private long _id;
	private String _URLID;
	private String _format;
	private String _type;
	private String _language;
	private String _title;
	private String _subject;
	private String _coverage;
	private String _description;
	private String _creator;
	private String _publisher;
	private String _contributor;
	private String _rightsHolder;
	private LegacyMetadata _escapedModel;
}