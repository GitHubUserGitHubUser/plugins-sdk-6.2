/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.uhh.l2g.plugins.migration.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import de.uhh.l2g.plugins.migration.model.LegacyLectureSeries;
import de.uhh.l2g.plugins.migration.model.LegacyLectureSeriesModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LegacyLectureSeries service. Represents a row in the &quot;lectureseries&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link de.uhh.l2g.plugins.migration.model.LegacyLectureSeriesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LegacyLectureSeriesImpl}.
 * </p>
 *
 * @author unihh
 * @see LegacyLectureSeriesImpl
 * @see de.uhh.l2g.plugins.migration.model.LegacyLectureSeries
 * @see de.uhh.l2g.plugins.migration.model.LegacyLectureSeriesModel
 * @generated
 */
public class LegacyLectureSeriesModelImpl extends BaseModelImpl<LegacyLectureSeries>
	implements LegacyLectureSeriesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a legacy lecture series model instance should use the {@link de.uhh.l2g.plugins.migration.model.LegacyLectureSeries} interface instead.
	 */
	public static final String TABLE_NAME = "lectureseries";
	public static final Object[][] TABLE_COLUMNS = {
			{ "number_", Types.VARCHAR },
			{ "eventType", Types.VARCHAR },
			{ "eventCategory", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "shortDesc", Types.VARCHAR },
			{ "semesterName", Types.VARCHAR },
			{ "language", Types.VARCHAR },
			{ "facultyName", Types.VARCHAR },
			{ "instructorsString", Types.VARCHAR },
			{ "id_", Types.BIGINT },
			{ "password_", Types.VARCHAR },
			{ "approved", Types.INTEGER },
			{ "longDesc", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table lectureseries (number_ VARCHAR(75) null,eventType VARCHAR(75) null,eventCategory VARCHAR(75) null,name VARCHAR(75) null,shortDesc VARCHAR(75) null,semesterName VARCHAR(75) null,language VARCHAR(75) null,facultyName VARCHAR(75) null,instructorsString VARCHAR(75) null,id_ LONG not null primary key,password_ VARCHAR(75) null,approved INTEGER,longDesc VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table lectureseries";
	public static final String ORDER_BY_JPQL = " ORDER BY legacyLectureSeries.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY lectureseries.id_ ASC";
	public static final String DATA_SOURCE = "anotherDataSource";
	public static final String SESSION_FACTORY = "anotherSessionFactory";
	public static final String TX_MANAGER = "anotherTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyLectureSeries"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.uhh.l2g.plugins.migration.model.LegacyLectureSeries"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.uhh.l2g.plugins.migration.model.LegacyLectureSeries"));

	public LegacyLectureSeriesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LegacyLectureSeries.class;
	}

	@Override
	public String getModelClassName() {
		return LegacyLectureSeries.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("number", getNumber());
		attributes.put("eventType", getEventType());
		attributes.put("eventCategory", getEventCategory());
		attributes.put("name", getName());
		attributes.put("shortDesc", getShortDesc());
		attributes.put("semesterName", getSemesterName());
		attributes.put("language", getLanguage());
		attributes.put("facultyName", getFacultyName());
		attributes.put("instructorsString", getInstructorsString());
		attributes.put("id", getId());
		attributes.put("password", getPassword());
		attributes.put("approved", getApproved());
		attributes.put("longDesc", getLongDesc());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String number = (String)attributes.get("number");

		if (number != null) {
			setNumber(number);
		}

		String eventType = (String)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		String eventCategory = (String)attributes.get("eventCategory");

		if (eventCategory != null) {
			setEventCategory(eventCategory);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String shortDesc = (String)attributes.get("shortDesc");

		if (shortDesc != null) {
			setShortDesc(shortDesc);
		}

		String semesterName = (String)attributes.get("semesterName");

		if (semesterName != null) {
			setSemesterName(semesterName);
		}

		String language = (String)attributes.get("language");

		if (language != null) {
			setLanguage(language);
		}

		String facultyName = (String)attributes.get("facultyName");

		if (facultyName != null) {
			setFacultyName(facultyName);
		}

		String instructorsString = (String)attributes.get("instructorsString");

		if (instructorsString != null) {
			setInstructorsString(instructorsString);
		}

		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		Integer approved = (Integer)attributes.get("approved");

		if (approved != null) {
			setApproved(approved);
		}

		String longDesc = (String)attributes.get("longDesc");

		if (longDesc != null) {
			setLongDesc(longDesc);
		}
	}

	@Override
	public String getNumber() {
		if (_number == null) {
			return StringPool.BLANK;
		}
		else {
			return _number;
		}
	}

	@Override
	public void setNumber(String number) {
		_number = number;
	}

	@Override
	public String getEventType() {
		if (_eventType == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_eventType = eventType;
	}

	@Override
	public String getEventCategory() {
		if (_eventCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventCategory;
		}
	}

	@Override
	public void setEventCategory(String eventCategory) {
		_eventCategory = eventCategory;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getShortDesc() {
		if (_shortDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortDesc;
		}
	}

	@Override
	public void setShortDesc(String shortDesc) {
		_shortDesc = shortDesc;
	}

	@Override
	public String getSemesterName() {
		if (_semesterName == null) {
			return StringPool.BLANK;
		}
		else {
			return _semesterName;
		}
	}

	@Override
	public void setSemesterName(String semesterName) {
		_semesterName = semesterName;
	}

	@Override
	public String getLanguage() {
		if (_language == null) {
			return StringPool.BLANK;
		}
		else {
			return _language;
		}
	}

	@Override
	public void setLanguage(String language) {
		_language = language;
	}

	@Override
	public String getFacultyName() {
		if (_facultyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _facultyName;
		}
	}

	@Override
	public void setFacultyName(String facultyName) {
		_facultyName = facultyName;
	}

	@Override
	public String getInstructorsString() {
		if (_instructorsString == null) {
			return StringPool.BLANK;
		}
		else {
			return _instructorsString;
		}
	}

	@Override
	public void setInstructorsString(String instructorsString) {
		_instructorsString = instructorsString;
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@Override
	public int getApproved() {
		return _approved;
	}

	@Override
	public void setApproved(int approved) {
		_approved = approved;
	}

	@Override
	public String getLongDesc() {
		if (_longDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _longDesc;
		}
	}

	@Override
	public void setLongDesc(String longDesc) {
		_longDesc = longDesc;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LegacyLectureSeries.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LegacyLectureSeries toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LegacyLectureSeries)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LegacyLectureSeriesImpl legacyLectureSeriesImpl = new LegacyLectureSeriesImpl();

		legacyLectureSeriesImpl.setNumber(getNumber());
		legacyLectureSeriesImpl.setEventType(getEventType());
		legacyLectureSeriesImpl.setEventCategory(getEventCategory());
		legacyLectureSeriesImpl.setName(getName());
		legacyLectureSeriesImpl.setShortDesc(getShortDesc());
		legacyLectureSeriesImpl.setSemesterName(getSemesterName());
		legacyLectureSeriesImpl.setLanguage(getLanguage());
		legacyLectureSeriesImpl.setFacultyName(getFacultyName());
		legacyLectureSeriesImpl.setInstructorsString(getInstructorsString());
		legacyLectureSeriesImpl.setId(getId());
		legacyLectureSeriesImpl.setPassword(getPassword());
		legacyLectureSeriesImpl.setApproved(getApproved());
		legacyLectureSeriesImpl.setLongDesc(getLongDesc());

		legacyLectureSeriesImpl.resetOriginalValues();

		return legacyLectureSeriesImpl;
	}

	@Override
	public int compareTo(LegacyLectureSeries legacyLectureSeries) {
		long primaryKey = legacyLectureSeries.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LegacyLectureSeries)) {
			return false;
		}

		LegacyLectureSeries legacyLectureSeries = (LegacyLectureSeries)obj;

		long primaryKey = legacyLectureSeries.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LegacyLectureSeries> toCacheModel() {
		LegacyLectureSeriesCacheModel legacyLectureSeriesCacheModel = new LegacyLectureSeriesCacheModel();

		legacyLectureSeriesCacheModel.number = getNumber();

		String number = legacyLectureSeriesCacheModel.number;

		if ((number != null) && (number.length() == 0)) {
			legacyLectureSeriesCacheModel.number = null;
		}

		legacyLectureSeriesCacheModel.eventType = getEventType();

		String eventType = legacyLectureSeriesCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			legacyLectureSeriesCacheModel.eventType = null;
		}

		legacyLectureSeriesCacheModel.eventCategory = getEventCategory();

		String eventCategory = legacyLectureSeriesCacheModel.eventCategory;

		if ((eventCategory != null) && (eventCategory.length() == 0)) {
			legacyLectureSeriesCacheModel.eventCategory = null;
		}

		legacyLectureSeriesCacheModel.name = getName();

		String name = legacyLectureSeriesCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			legacyLectureSeriesCacheModel.name = null;
		}

		legacyLectureSeriesCacheModel.shortDesc = getShortDesc();

		String shortDesc = legacyLectureSeriesCacheModel.shortDesc;

		if ((shortDesc != null) && (shortDesc.length() == 0)) {
			legacyLectureSeriesCacheModel.shortDesc = null;
		}

		legacyLectureSeriesCacheModel.semesterName = getSemesterName();

		String semesterName = legacyLectureSeriesCacheModel.semesterName;

		if ((semesterName != null) && (semesterName.length() == 0)) {
			legacyLectureSeriesCacheModel.semesterName = null;
		}

		legacyLectureSeriesCacheModel.language = getLanguage();

		String language = legacyLectureSeriesCacheModel.language;

		if ((language != null) && (language.length() == 0)) {
			legacyLectureSeriesCacheModel.language = null;
		}

		legacyLectureSeriesCacheModel.facultyName = getFacultyName();

		String facultyName = legacyLectureSeriesCacheModel.facultyName;

		if ((facultyName != null) && (facultyName.length() == 0)) {
			legacyLectureSeriesCacheModel.facultyName = null;
		}

		legacyLectureSeriesCacheModel.instructorsString = getInstructorsString();

		String instructorsString = legacyLectureSeriesCacheModel.instructorsString;

		if ((instructorsString != null) && (instructorsString.length() == 0)) {
			legacyLectureSeriesCacheModel.instructorsString = null;
		}

		legacyLectureSeriesCacheModel.id = getId();

		legacyLectureSeriesCacheModel.password = getPassword();

		String password = legacyLectureSeriesCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			legacyLectureSeriesCacheModel.password = null;
		}

		legacyLectureSeriesCacheModel.approved = getApproved();

		legacyLectureSeriesCacheModel.longDesc = getLongDesc();

		String longDesc = legacyLectureSeriesCacheModel.longDesc;

		if ((longDesc != null) && (longDesc.length() == 0)) {
			legacyLectureSeriesCacheModel.longDesc = null;
		}

		return legacyLectureSeriesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{number=");
		sb.append(getNumber());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", eventCategory=");
		sb.append(getEventCategory());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", shortDesc=");
		sb.append(getShortDesc());
		sb.append(", semesterName=");
		sb.append(getSemesterName());
		sb.append(", language=");
		sb.append(getLanguage());
		sb.append(", facultyName=");
		sb.append(getFacultyName());
		sb.append(", instructorsString=");
		sb.append(getInstructorsString());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", approved=");
		sb.append(getApproved());
		sb.append(", longDesc=");
		sb.append(getLongDesc());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("de.uhh.l2g.plugins.migration.model.LegacyLectureSeries");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>number</column-name><column-value><![CDATA[");
		sb.append(getNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventCategory</column-name><column-value><![CDATA[");
		sb.append(getEventCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortDesc</column-name><column-value><![CDATA[");
		sb.append(getShortDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>semesterName</column-name><column-value><![CDATA[");
		sb.append(getSemesterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>language</column-name><column-value><![CDATA[");
		sb.append(getLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>facultyName</column-name><column-value><![CDATA[");
		sb.append(getFacultyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>instructorsString</column-name><column-value><![CDATA[");
		sb.append(getInstructorsString());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approved</column-name><column-value><![CDATA[");
		sb.append(getApproved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longDesc</column-name><column-value><![CDATA[");
		sb.append(getLongDesc());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LegacyLectureSeries.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LegacyLectureSeries.class
		};
	private String _number;
	private String _eventType;
	private String _eventCategory;
	private String _name;
	private String _shortDesc;
	private String _semesterName;
	private String _language;
	private String _facultyName;
	private String _instructorsString;
	private long _id;
	private String _password;
	private int _approved;
	private String _longDesc;
	private LegacyLectureSeries _escapedModel;
}